const Main                          = {
    
    test (req, res, cb) {
        cb({success: true, data: ['data'] });
    },

    /* add item to dynamo */
    createCall(req, res, cb) {
        
        let docClient = req.db;
        let params = {
            TableName: 'Employee',
            Item: req.body.data,
            'ConditionExpression' : 'attribute_not_exists(EmployeeID) OR attribute_not_exists(Email)'
        };
        docClient.put(params, function(err, data) {
            if (err) {
                cb({success: false, data: `Unable to add item. Error JSON: ${JSON.stringify(err, null, 2)}`});
            } else {
                cb({success: true, data: `Added item:, ${JSON.stringify(data, null, 2)}`});
            }
        });
    },  

    /* return all */
    getAll(req, res, cb) {
        
        let docClient = req.db;
        let params = {
            TableName: "Employee",
            Key: {
                EmployeeID: "EmployeeID"
            }
        }

        docClient.scan(params, onScan);

        function onScan(err, data) {
            if (err) {
                cb({
                    success: false,
                    data: `Unable to scan the table. Error JSON: ${JSON.stringify(err, null, 2)}`
                })
            } else {
                cb({
                    success: true,
                    data: data.Items
                });
            }
        }
    },

    /* return by */
    getBy(req, res, cb) {        
        
        let docClient = req.db;
        let key = req.params.by;

        let kce = `#${key} = :${key}`;
        let ean = { [`#${key}`] : `${key}`};
        let eav = { [`:${key}`]: req.params.id}

        let params = {
            TableName: "Employee",
            ExpressionAttributeNames: ean,
            ExpressionAttributeValues: eav,
            FilterExpression: `#${key} = :${key}`
        };

        docClient.scan(params, function(err, data) {
            if (err) {
                cb({success: false, data: err, keycalled: key, kce: kce, exp: ean, eav: eav});
            } else {                
                cb({success: true, data: data });
            }
        });
    },

    /* update item */
    updateCall(req, res, cb) {
        let docClient = req.db;

        let key = req.body.Employee;
        let elem = req.body.Key;

        let eav = { [`:${elem}`]: req.body.Value };

        let params = {
            TableName:'Employee',            
            Key: { 
                'EmployeeID': key.ID,
                'Email': key.Email
            },
            ExpressionAttributeValues: eav,
            UpdateExpression: `set ${elem} = :${elem}`,            
            ReturnValues:"UPDATED_NEW"
        };

        console.log(params);

        docClient.update(params, function(err, data) {
            if (err) {
                cb({success: false, data: err, dataPassed: params});
            } else {                
                cb({success: true, data: data });
            }
        });
        
    },

    /* remove item - chose delete over invalidation model */
    deleteCall(req, res, cb) {
        
        console.log(req.body);
        
        let docClient = req.db;
        let key = req.body.EmployeeID;
        let email = req.body.Email;

        let params = {
            TableName: 'Employee',
            Key: { 
                'EmployeeID': key,
                'Email': email
            }
        };
        
        console.log(`Attempting a conditional delete with ${key}...`);
        
        docClient.delete(params, function(err, data) {
            if (err) {
                cb({success: false, data: err, dataPassed: params});
            } else {                
                cb({success: true, data: data });
            }
        });


    }
    
}

module.exports                      = Main;